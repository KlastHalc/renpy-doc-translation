# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2018, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 7.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-17 01:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/screen_python.rst:6
msgid "Screens and Python"
msgstr ""

#: ../../source/screen_python.rst:8
msgid "Ren'Py supports defining screens in Python, as well as in the Ren'Py screen language. A Python screen is created by supplying a screen function to the :func:`renpy.define_screen` function. It can then be used like it was any other screen."
msgstr ""

#: ../../source/screen_python.rst:13
msgid "The screen function should have parameters corresponding to the scope variables it expects, and it should ignore extra keyword arguments. (That is, it should have `**kwargs` at the end of its parameter list.) It is then expected to call the UI functions to add displayables to the screen.The screen function is called whenever an interaction starts or restarts."
msgstr ""

#: ../../source/screen_python.rst:20
msgid "To ensure that this restarting is seamless to the user (and not causing things to reset), it's important that every call to a UI function supply the `id` argument. As a screen is re-created, Ren'Py will update each displayable with the contents of the old displayable with the same id. Ids are generated automatically by the screen language, but when doing things by hand, they must be manually specified."
msgstr ""

#: ../../source/screen_python.rst:28
msgid "Warning: UI Functions are deprecated and not recommended."
msgstr ""

#: ../../source/screen_python.rst:30
msgid "Here's an example python screen::"
msgstr ""

#: ../../source/screen_python.rst:47
msgid "Screen Functions"
msgstr ""

#: ../../source/screen_python.rst:49
msgid "The following functions support the definition, display, and hiding of screens."
msgstr ""

#: ../../source/screen_python.rst:55
msgid "UI Functions"
msgstr ""

#: ../../source/screen_python.rst:59
msgid "The implementation of Ren'Py has changed, and UI functions that create displayables can now be far slower than their screen language equivalents."
msgstr ""

#: ../../source/screen_python.rst:63
msgid "The UI functions are python equivalents of the screen language statements. For each screen language statement, there is a ui function with the same name. For example, ui.text corresponds to the text statement, and ui.add corresponds to the add statement."
msgstr ""

#: ../../source/screen_python.rst:68
msgid "There is a simple mapping between screen language parameters and arguments and python arguments. Screen language parameters become positional arguments, while properties become keyword arguments. For example, the screen language statement: ::"
msgstr ""

#: ../../source/screen_python.rst:75
msgid "becomes: ::"
msgstr ""

#: ../../source/screen_python.rst:79
msgid "(It really should have an `id` parameter added.)"
msgstr ""

#: ../../source/screen_python.rst:81
msgid "There are three groups of UI functions, corresponding to the number of children they take."
msgstr ""

#: ../../source/screen_python.rst:87
msgid "The following UI functions do not take any children."
msgstr ""

#: ../../source/screen_python.rst:89
msgid "ui.add"
msgstr ""

#: ../../source/screen_python.rst:90
msgid "ui.bar"
msgstr ""

#: ../../source/screen_python.rst:91
msgid "ui.imagebutton"
msgstr ""

#: ../../source/screen_python.rst:92
msgid "ui.input"
msgstr ""

#: ../../source/screen_python.rst:93
msgid "ui.key"
msgstr ""

#: ../../source/screen_python.rst:94
msgid "ui.label"
msgstr ""

#: ../../source/screen_python.rst:95
msgid "ui.null"
msgstr ""

#: ../../source/screen_python.rst:96
msgid "ui.text"
msgstr ""

#: ../../source/screen_python.rst:97
msgid "ui.textbutton"
msgstr ""

#: ../../source/screen_python.rst:98
msgid "ui.timer"
msgstr ""

#: ../../source/screen_python.rst:99
msgid "ui.vbar"
msgstr ""

#: ../../source/screen_python.rst:100
msgid "ui.hotspot"
msgstr ""

#: ../../source/screen_python.rst:101
msgid "ui.hotbar"
msgstr ""

#: ../../source/screen_python.rst:102
msgid "ui.spritemanager"
msgstr ""

#: ../../source/screen_python.rst:104
msgid "The following UI functions take a single child. They must be given that child - use ui.null() if the child is missing."
msgstr ""

#: ../../source/screen_python.rst:107
msgid "ui.button"
msgstr ""

#: ../../source/screen_python.rst:108
msgid "ui.frame"
msgstr ""

#: ../../source/screen_python.rst:109
msgid "ui.transform"
msgstr ""

#: ../../source/screen_python.rst:110
msgid "ui.window"
msgstr ""

#: ../../source/screen_python.rst:111
msgid "ui.drag"
msgstr ""

#: ../../source/screen_python.rst:113
msgid "The following UI functions take multiple children. They continue taking children until :func:`ui.close` is called."
msgstr ""

#: ../../source/screen_python.rst:116
msgid "ui.fixed"
msgstr ""

#: ../../source/screen_python.rst:117
msgid "ui.grid"
msgstr ""

#: ../../source/screen_python.rst:118
msgid "ui.hbox"
msgstr ""

#: ../../source/screen_python.rst:119
msgid "ui.side"
msgstr ""

#: ../../source/screen_python.rst:120
msgid "ui.vbox"
msgstr ""

#: ../../source/screen_python.rst:121
msgid "ui.imagemap"
msgstr ""

#: ../../source/screen_python.rst:122
msgid "ui.draggroup"
msgstr ""

#: ../../source/screen_python.rst:124
msgid "There are a few UI functions that do not correspond to screen language statements, as they correspond to concepts that are not present in the screen language."
msgstr ""

#: ../../source/screen_python.rst:131
msgid "Actions"
msgstr ""

#: ../../source/screen_python.rst:133
msgid "Many of the displayables created in the screen language take actions as arguments. An action is one of three things:"
msgstr ""

#: ../../source/screen_python.rst:136
msgid "A callable python object (like a function or bound method) that takes no arguments."
msgstr ""

#: ../../source/screen_python.rst:138
msgid "An object of a class that inherits from the Action class."
msgstr ""

#: ../../source/screen_python.rst:139
msgid "A list of other Actions."
msgstr ""

#: ../../source/screen_python.rst:141
msgid "The advantage to inheriting from the Action class is that it allows you to override the methods that determine when a button should be sensitive, and when it is selected."
msgstr ""

#: ../../source/screen_python.rst:147
msgid "To define a new action, inherit from this class. Override the methods in this class to change the behavior of the action."
msgstr ""

#: ../../source/screen_python.rst:152
msgid "This is the method that is called when the action is activated. In many cases, returning a non-None value from the action will cause the current interaction to end."
msgstr ""

#: ../../source/screen_python.rst:156
#: ../../source/screen_python.rst:223
msgid "This method must be overridden, as the default method will raise NotImplemented (and hence cause Ren'Py to report an error)."
msgstr ""

#: ../../source/screen_python.rst:162
msgid "This is called to determine if the button with this action should be sensitive. It should return true if the button is sensitive."
msgstr ""

#: ../../source/screen_python.rst:166
msgid "Note that __call__ can be called, even if this returns False."
msgstr ""

#: ../../source/screen_python.rst:168
msgid "The default implementation returns True."
msgstr ""

#: ../../source/screen_python.rst:172
msgid "This should return true if the button should be rendered as a selected button, and false otherwise."
msgstr ""

#: ../../source/screen_python.rst:175
msgid "The default implemention returns False."
msgstr ""

#: ../../source/screen_python.rst:179
msgid "This method is called once at the start of each interaction, and then is called periodically thereafter. If it returns a number, it will be called before that many seconds elapse, but it might be called sooner."
msgstr ""

#: ../../source/screen_python.rst:184
msgid "The main use of this is to call :func:`renpy.restart_interaction` if the value of get_selected or get_sensitive should change."
msgstr ""

#: ../../source/screen_python.rst:188
msgid "It takes one argument:"
msgstr ""

#: ../../source/screen_python.rst:191
msgid "`st`"
msgstr ""

#: ../../source/screen_python.rst:191
msgid "The number of seconds since the screen or displayable this action is associated with was first shown."
msgstr ""

#: ../../source/screen_python.rst:196
msgid "When the action is used as the `hovered` parameter to a button (or similar object), this method is called when the object loses focus."
msgstr ""

#: ../../source/screen_python.rst:199
msgid "To run an action from python, use renpy.run."
msgstr ""

#: ../../source/screen_python.rst:204
msgid "BarValues"
msgstr ""

#: ../../source/screen_python.rst:206
msgid "When creating a bar, vbar, or hotbar, a BarValue object can be supplied as the `value` property. Methods on the BarValue object are called to get the adjustment and styles."
msgstr ""

#: ../../source/screen_python.rst:213
msgid "To define a new BarValue, inherit from this class and override some of the methods."
msgstr ""

#: ../../source/screen_python.rst:218
msgid "This method is called to get an adjustment object for the bar. It should create the adjustment with :func:`ui.adjustment`, and then return the object created this way."
msgstr ""

#: ../../source/screen_python.rst:229
msgid "This is used to determine the style of bars that use this value. It should return a tuple of two style names or style objects. The first is used for a bar, and the second for vbar."
msgstr ""

#: ../../source/screen_python.rst:234
msgid "This defaults to (\"bar\", \"vbar\")."
msgstr ""

#: ../../source/screen_python.rst:238
msgid "This is called when a BarValue replaces another BarValue, such as when a screen is updated. It can be used to update this BarValue from the other. It is called before get_adjustment."
msgstr ""

#: ../../source/screen_python.rst:242
msgid "Note that `other` is not necessarily the same type as `self`."
msgstr ""

#: ../../source/screen_python.rst:246
msgid "This method is called once at the start of each interaction. If it returns a number of seconds, it will be called before that many seconds elapse, but it might be called sooner. It is called after get_adjustment."
msgstr ""

#: ../../source/screen_python.rst:251
msgid "It can be used to update the value of the bar over time, like :func:`AnimatedValue` does. To do this, get_adjustment should store the adjustment, and periodic should call the adjustment's changed method."
msgstr ""

#: ../../source/screen_python.rst:257
msgid "InputValue"
msgstr ""

#: ../../source/screen_python.rst:259
msgid "When creating an input, an InputValue object can be supplied as the `value` property. Methods on the InputValue object are called to get and set the text, determine if the input is editable, and handle the enter key being pressed."
msgstr ""

#: ../../source/screen_python.rst:266
msgid "To define a new InputValue, inherit from this class, override some or all of the methods, and set the value of the default field."
msgstr ""

#: ../../source/screen_python.rst:276
msgid "If true, the input is eligible to be editable by default. (That is, it may be given the caret when the screen is shown.)"
msgstr ""

#: ../../source/screen_python.rst:281
msgid "Returns the default text of the input. This must be implemented."
msgstr ""

#: ../../source/screen_python.rst:285
msgid "Called when the text of the input is changed, with the new text. This must be implemented."
msgstr ""

#: ../../source/screen_python.rst:290
msgid "Called when the user presses enter. If this returns a non-None value, that value is returned from the interacton. This may also raise renpy.IgnoreEvent() to ignore the press. Otherwise, the enter-press is propagated to other displayables."
msgstr ""

#: ../../source/screen_python.rst:295
msgid "The following actions are available as methods on InputValue:"
msgstr ""

#: ../../source/screen_python.rst:299
msgid "Returns an action that enables text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:303
msgid "Returns an action that disables text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:307
msgid "Returns an action that toggles text editing on the input."
msgstr ""

#: ../../source/screen_python.rst:313
msgid "Creator-Defined Screen Language Statements"
msgstr ""

#: ../../source/screen_python.rst:315
msgid "Ren'Py supports defining custom screen language statements. Creator-defined screen language statements are wrappers for the screen language :ref:`use statement <sl-use>`. Positional arguments remain positional arguments, properties become keyword arguments, and if the statement takes a block, so does the use statement. For example, the custom screen language statement::"
msgstr ""

#: ../../source/screen_python.rst:326
msgid "becomes::"
msgstr ""

#: ../../source/screen_python.rst:331
msgid "Creator-defined screen language statements must be registered in a python early block. What's more, the filename containing the creator-defined statement must be be loaded earlier than any file that uses it. Since Ren'Py loads files in unicode sort order, it generally makes sense to prefix the name of any file registering a user-defined statement with 01, or some other small number."
msgstr ""

#: ../../source/screen_python.rst:337
msgid "Creator-defined screen language statements are registered with the renpy.register_sl_statement function:"
msgstr ""

#: ../../source/screen_python.rst:342
msgid "As an example of a creator-defined screen language statement, here's an implementation of the ``titledwindow`` statement given above. First, the statement must be registered in a python early block in a file that is loaded early - a name like 01custom.rpy will often load soon enough. The registration call looks like::"
msgstr ""

#: ../../source/screen_python.rst:352
msgid "Then, we define a screen that implements the custom statement. This screen can be defined in any file. One such screen is::"
msgstr ""

