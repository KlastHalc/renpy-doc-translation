# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.99.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-30 12:21+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/dialogue.rst:5
msgid "Dialogue and Narration"
msgstr ""

#: ../../source/dialogue.rst:7
msgid "Text is fundamental to visual novels, and generally quite important to storytelling-based games. This text may consist of dialogue labeled with the character that is saying it, and narration, which does not have a speaker. (For convenience, we will lump both dialogue and narration together as dialogue, except where the differences are important.) It's also important that the user be able to customize the look of dialogue to suit their game."
msgstr ""

#: ../../source/dialogue.rst:15
msgid "In Ren'Py, most dialogue is written using say statements. The look of dialogue may be customized on a per-character basis by using Character objects."
msgstr ""

#: ../../source/dialogue.rst:22
msgid "Say Statement"
msgstr ""

#: ../../source/dialogue.rst:24
msgid "The say statement is used for dialogue and narration. Since it's almost always the most frequently used statement in Ren'Py scripts, the say statement has a syntax that minimizes the overhead in writing it. Some example say statements are::"
msgstr ""

#: ../../source/dialogue.rst:38
msgid "The first form of the say statement consists of a string by itself. This form is used for narration, with the narration being the contents of the string."
msgstr ""

#: ../../source/dialogue.rst:42
msgid "The second form consists of two strings. The first string is the name of the character who is speaking, and the second is the dialogue being spoken."
msgstr ""

#: ../../source/dialogue.rst:46
msgid "The third form consists of a simple expression followed by a string. The simple expression should evaluate to either a string giving a character name, or a Character object. In the latter case, the character object is used to control how the dialogue is shown."
msgstr ""

#: ../../source/dialogue.rst:51
msgid "The final form consists of a string and a with clause which has a transition. In this case, the string is shown and a screen is shaken at the same time."
msgstr ""

#: ../../source/dialogue.rst:56
msgid "Although the precise details of what a say statement does is controlled by the character object used, the usual effect of a say statement is to display dialogue on the screen until the user clicks to dismiss it, then to remove that dialogue on the screen."
msgstr ""

#: ../../source/dialogue.rst:61
msgid "Certain characters have special meaning to Ren'Py, and so can't be used in dialogue strings. The ``{`` character begins a text tag, and the ``[`` character begins a substitution. To use them in dialogue, double them. It may also be necessary to precede a quote with a backslash to prevent it from closing the string. For example::"
msgstr ""

#: ../../source/dialogue.rst:72
msgid "Defining Character Objects"
msgstr ""

#: ../../source/dialogue.rst:74
msgid "By creating a Character object and using it in a say statement, you can customize the look (and to some extent, the behavior) of dialogue. Characters are created by using the define statement to assign a Character to a variable. For example::"
msgstr ""

#: ../../source/dialogue.rst:83
msgid "Once this is done, the character can be used in a say statement::"
msgstr ""

#: ../../source/dialogue.rst:88
msgid "Character is a python function, that takes a large number of keyword arguments. These keyword arguments control the behavior of the character."
msgstr ""

#: ../../source/dialogue.rst:92
msgid "The define statement causes its expression to be evaluated, and assigned to the supplied name. If not inside an init block, the define statement will automatically be run with init priority 0."
msgstr ""

#: ../../source/inc/character:5
msgid "Creates and returns a Character object, which controls the look and feel of dialogue and narration."
msgstr ""

#: ../../source/inc/character:11
msgid "`name`"
msgstr ""

#: ../../source/inc/character:9
msgid "If a string, the name of the character for dialogue. When `name` is ``None``, display of the name is omitted, as for narration."
msgstr ""

#: ../../source/inc/character:18
msgid "`kind`"
msgstr ""

#: ../../source/inc/character:14
msgid "The Character to base this Character off of. When used, the default value of any argument not supplied to this Character is the value of that argument supplied to `kind`. This can be used to define a template character, and then copy that character with changes."
msgstr ""

#: ../../source/inc/character:20
msgid "**Linked Image** An image tag may be associated with a Character. This allows a say statement involving this character to display an image with the tag, and also allows Ren'Py to automatically select a side image to show when this character speaks."
msgstr ""

#: ../../source/inc/character:28
msgid "`image`"
msgstr ""

#: ../../source/inc/character:27
msgid "A string giving the image tag that is linked with this character."
msgstr ""

#: ../../source/inc/character:30
msgid "**Voice Tag** If a voice tag is assign to a Character, the voice files that are associated with it, can be muted or played in the preference screen."
msgstr ""

#: ../../source/inc/character:37
msgid "`voice_tag`"
msgstr ""

#: ../../source/inc/character:36
msgid "A String that enables the voice file associated with the Character to be muted or played in the 'voice' channel."
msgstr ""

#: ../../source/inc/character:39
msgid "**Prefixes and Suffixes.** These allow a prefix and suffix to be applied to the name of the character, and to the text being shown. This can be used, for example, to add quotes before and after each line of dialogue."
msgstr ""

#: ../../source/inc/character:46
msgid "`what_prefix`"
msgstr ""

#: ../../source/inc/character:45
msgid "A string that is prepended to the dialogue being spoken before it is shown."
msgstr ""

#: ../../source/inc/character:50
msgid "`what_suffix`"
msgstr ""

#: ../../source/inc/character:49
msgid "A string that is appended to the dialogue being spoken before it is shown."
msgstr ""

#: ../../source/inc/character:54
msgid "`who_prefix`"
msgstr ""

#: ../../source/inc/character:53
msgid "A string that is prepended to the name of the character before it is shown."
msgstr ""

#: ../../source/inc/character:58
msgid "`who_suffix`"
msgstr ""

#: ../../source/inc/character:57
msgid "A string that is appended to the name of the character before it is shown."
msgstr ""

#: ../../source/inc/character:60
msgid "**Changing Name Display.** These options help to control the display of the name."
msgstr ""

#: ../../source/inc/character:66
msgid "`dynamic`"
msgstr ""

#: ../../source/inc/character:64
msgid "If true, then `name` should be a string containing a python expression. That string will be evaluated before each line of dialogue, and the result used as the name of the character."
msgstr ""

#: ../../source/inc/character:68
msgid "**Controlling Interactions.** These options control if the dialogue is displayed, if an interaction occurs, and the mode that is entered upon display."
msgstr ""

#: ../../source/inc/character:75
msgid "`condition`"
msgstr ""

#: ../../source/inc/character:73
msgid "If given, this should be a string containing a python expression. If the expression is false, the dialogue does not occur, as if the say statement did not happen."
msgstr ""

#: ../../source/inc/character:80
msgid "`interact`"
msgstr ""

#: ../../source/inc/character:78
msgid "If true, the default, an interaction occurs whenever the dialogue is shown. If false, an interaction will not occur, and additional elements can be added to the screen."
msgstr ""

#: ../../source/inc/character:84
msgid "`mode`"
msgstr ""

#: ../../source/inc/character:83
msgid "A string giving the mode to enter when this character speaks. See the section on :ref:`modes <modes>` for more details."
msgstr ""

#: ../../source/inc/character:89
msgid "`callback`"
msgstr ""

#: ../../source/inc/character:87
msgid "A function that is called when events occur while the character is speaking. See the section on :ref:`character-callbacks` fore more information."
msgstr ""

#: ../../source/inc/character:91
msgid "**Click-to-continue.** A click-to-continue indicator is displayed once all the text has finished displaying, to prompt the user to advance."
msgstr ""

#: ../../source/inc/character:97
msgid "`ctc`"
msgstr ""

#: ../../source/inc/character:96
msgid "A Displayable to use as the click-to-continue indicator, unless a more specific indicator is used."
msgstr ""

#: ../../source/inc/character:101
msgid "`ctc_pause`"
msgstr ""

#: ../../source/inc/character:100
msgid "A Displayable to use a the click-to-continue indicator when the display of text is paused by the {p} or {w} text tags."
msgstr ""

#: ../../source/inc/character:107
msgid "`ctc_timedpause`"
msgstr ""

#: ../../source/inc/character:104
msgid "A Displayable to use a the click-to-continue indicator when the display of text is paused by the {p=} or {w=} text tags. When None, this takes its default from ctc_pause, use ``Null()`` when you want a ctc_pause but no ctc_timedpause."
msgstr ""

#: ../../source/inc/character:115
msgid "`ctc_position`"
msgstr ""

#: ../../source/inc/character:110
msgid "Controls the location of the click-to-continue indicator. If ``\"nestled\"``, the indicator is displayed as part of the text being shown, immediately after the last character. If ``\"fixed\"``, the indicator is added to the screen, and its position is controlled by the position style properties."
msgstr ""

#: ../../source/inc/character:117
msgid "**Screens.** The display of dialogue uses a :ref:`screen <screens>`. These arguments allow you to select that screen, and to provide arguments to it."
msgstr ""

#: ../../source/inc/character:122
msgid "`screen`"
msgstr ""

#: ../../source/inc/character:122
msgid "The name of the screen that is used to display the dialogue."
msgstr ""

#: ../../source/inc/character:124
msgid "Keyword arguments beginning with ``show_`` have the prefix stripped off, and are passed to the screen as arguments. For example, the value of ``show_side_image`` will become the value of the ``side_image`` variable in the screen."
msgstr ""

#: ../../source/inc/character:129
msgid "Some useful ``show_`` variables implemented by the default screens are:"
msgstr ""

#: ../../source/inc/character:136
msgid "`show_side_image`"
msgstr ""

#: ../../source/inc/character:132
msgid "When given a Displayable, shows that displayable when the dialogue is shown. The position of that displayable is controlled by its position properties. This is often used to show an image of the speaking character to the side of the dialogue."
msgstr ""

#: ../../source/inc/character:141
msgid "`show_two_window`"
msgstr ""

#: ../../source/inc/character:139
msgid "If true, restructures the layout so that the name of the character is placed in one window, and the dialogue text in a second window."
msgstr ""

#: ../../source/inc/character:145
msgid "`show_layer`"
msgstr ""

#: ../../source/inc/character:144
msgid "If given, this should be a string giving the name of the layer to show the \"say\" screen on."
msgstr ""

#: ../../source/inc/character:147
msgid "**Styling Text and Windows.** Keyword arguments beginning with ``who_``, ``what_``, and `window_`` have their prefix stripped, and are used to :ref:`style <styles>` the character name, the spoken text, and the window containing both, respectively."
msgstr ""

#: ../../source/inc/character:153
msgid "For example, if a character is given the keyword argument ``who_color=\"#c8ffc8\"``, the color of the character's name is changed, in this case to green. ``window_background=\"frame.png\"`` sets the background of the window containing this character's dialogue."
msgstr ""

#: ../../source/inc/character:159
msgid "The style applied to the character name, spoken text, and window can also be set this way, using the `who_style`, `what_style`, and `window_style` arguments, respectively."
msgstr ""

#: ../../source/dialogue.rst:99
msgid "Say with Image Attributes"
msgstr ""

#: ../../source/dialogue.rst:101
msgid "When a character is defined with an associated image tag, say statement involving that character may have image attributes placed between the character name and the second string."
msgstr ""

#: ../../source/dialogue.rst:105
msgid "In this form, if an image with the given tag is showing, Ren'Py will issue a show command involving the character tag and the attributes. If the image is not shown, Ren'Py will store the attributes for use by side images, but will not show an image."
msgstr ""

#: ../../source/dialogue.rst:111
msgid "For example, the code::"
msgstr ""

#: ../../source/dialogue.rst:122
#: ../../source/dialogue.rst:286
msgid "is equivalent to::"
msgstr ""

#: ../../source/dialogue.rst:134
msgid "To cause a transition to occur whenever the images are changed in this way, set :var:`config.say_attribute_transition` to a transition."
msgstr ""

#: ../../source/dialogue.rst:138
msgid "Example Characters"
msgstr ""

#: ../../source/dialogue.rst:140
msgid "Here are a few example characters::"
msgstr ""

#: ../../source/dialogue.rst:149
msgid "Special Characters"
msgstr ""

#: ../../source/dialogue.rst:151
msgid "A few character names are defined by default, and are used automatically in certain situations. Intentionally redefining these characters can change the behavior of Ren'Py, but accidentally using them can be a problem."
msgstr ""

#: ../../source/dialogue.rst:159
msgid "``adv``"
msgstr ""

#: ../../source/dialogue.rst:157
msgid "The default kind of character used by Character. This sets up a character such that one line is displayed on the screen at a time."
msgstr ""

#: ../../source/dialogue.rst:164
msgid "``nvl``"
msgstr ""

#: ../../source/dialogue.rst:162
msgid "A kind of Character that causes dialogue to be displayed in :ref:`NVL-mode`, with multiple lines of text on the screen at once."
msgstr ""

#: ../../source/dialogue.rst:168
msgid "``narrator``"
msgstr ""

#: ../../source/dialogue.rst:167
msgid "The character that's used to display narration, by say statements without a character name."
msgstr ""

#: ../../source/dialogue.rst:174
msgid "``name_only``"
msgstr ""

#: ../../source/dialogue.rst:171
msgid "A character that is used to display dialogue in which the character name is given as a string. This character is copied to a new character with the given name, and then that new character is used to display the dialogue."
msgstr ""

#: ../../source/dialogue.rst:178
msgid "``centered``"
msgstr ""

#: ../../source/dialogue.rst:177
msgid "A character that causes what it says to be displayed centered, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:183
msgid "``vcentered``"
msgstr ""

#: ../../source/dialogue.rst:181
msgid "A character that causes what it says to be displayed centered in vertically oriented text, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:191
msgid "``extend``"
msgstr ""

#: ../../source/dialogue.rst:186
msgid "A character that causes the last character to speak to say a line of dialogue consisting of the last line of dialogue spoken, \"{fast}\", and the dialogue given to extend. This can be used to have the screen change over the course of dialogue."
msgstr ""

#: ../../source/dialogue.rst:191
msgid "Extend is aware of NVL-mode, and treats it correctly."
msgstr ""

#: ../../source/dialogue.rst:193
#: ../../source/dialogue.rst:248
msgid "For example::"
msgstr ""

#: ../../source/dialogue.rst:215
msgid "Dialogue Window Management"
msgstr ""

#: ../../source/dialogue.rst:217
msgid "Ren'Py includes several statements that allow for management of the dialogue window. As dialogue window is always shown during dialogue, these statements control the presence or absence of the window during non-dialogue interactions."
msgstr ""

#: ../../source/dialogue.rst:222
msgid "``window show``"
msgstr ""

#: ../../source/dialogue.rst:224
msgid "The window show statement causes the window to be shown. It takes as an argument an optional transition, which is used to show the window. If the transition is omitted, :var:`config.window_show_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:229
msgid "``window hide``"
msgstr ""

#: ../../source/dialogue.rst:231
msgid "The window hide statement causes the window to be hidden. It takes as an argument an optional transition, which is used to hide the window. If the transition is omitted,  :var:`config.window_hide_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:236
msgid "``window auto``"
msgstr ""

#: ../../source/dialogue.rst:238
msgid "This enables automatic management of the window. The window is shown before statements listed in :var:`config.window_auto_show` - by default, say statements. The window is hidden before statements listed in :var:`config.window_auto_hide` - by default, ``scene`` and ``call screen`` statements."
msgstr ""

#: ../../source/dialogue.rst:244
msgid "The ``window auto`` statement uses :var:`config.window_show_transition` and :var:`config.window_hide_transition` to show and hide the window, respectively. ``window auto`` is cancelled by ``window show`` or ``window hide``."
msgstr ""

#: ../../source/dialogue.rst:269
msgid "Dialogue window management is subject to the \"show empty window\" :func:`Preference`. If the preference is disabled, the statements above have no effect."
msgstr ""

#: ../../source/dialogue.rst:274
msgid "Python Equivalents"
msgstr ""

#: ../../source/dialogue.rst:278
msgid "This may only make sense if you've read the :ref:`python` section."
msgstr ""

#: ../../source/dialogue.rst:280
msgid "When the first parameter to a say statement is present and an expression, the say statement is equivalent to calling that expressing with the dialogue and an `interact` argument of True. For example::"
msgstr ""

#: ../../source/dialogue.rst:290
msgid "The say statement will search the ``character`` named store before the default store. If you want to have a character with the same name as a variable in the default store, it can be defined using::"
msgstr ""

#: ../../source/dialogue.rst:296
msgid "This character can then be used alongside a variable in the default store::"
msgstr ""

