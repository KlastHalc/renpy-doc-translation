# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2018, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.99.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-12 18:16+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/dialogue.rst:5
msgid "Dialogue and Narration"
msgstr ""

#: ../../source/dialogue.rst:7
msgid "Text is fundamental to visual novels, and generally quite important to storytelling-based games. This text may consist of dialogue labeled with the character that is saying it, and narration, which does not have a speaker. (For convenience, we will lump both dialogue and narration together as dialogue, except where the differences are important.) It's also important that the user be able to customize the look of dialogue to suit their game."
msgstr ""

#: ../../source/dialogue.rst:15
msgid "In Ren'Py, most dialogue is written using say statements. The look of dialogue may be customized on a per-character basis by using Character objects."
msgstr ""

#: ../../source/dialogue.rst:22
msgid "Say Statement"
msgstr ""

#: ../../source/dialogue.rst:24
msgid "The say statement is used for dialogue and narration. Since it's almost always the most frequently used statement in Ren'Py scripts, the say statement has a syntax that minimizes the overhead in writing it. Some example say statements are::"
msgstr ""

#: ../../source/dialogue.rst:38
msgid "The first form of the say statement consists of a string by itself. This form is used for narration, with the narration being the contents of the string."
msgstr ""

#: ../../source/dialogue.rst:42
msgid "The second form consists of two strings. The first string is the name of the character who is speaking, and the second is the dialogue being spoken."
msgstr ""

#: ../../source/dialogue.rst:46
msgid "The third form consists of a simple expression followed by a string. The simple expression should evaluate to either a string giving a character name, or a Character object. In the latter case, the character object is used to control how the dialogue is shown."
msgstr ""

#: ../../source/dialogue.rst:51
msgid "The final form consists of a string and a with clause which has a transition. In this case, the string is shown and a screen is shaken at the same time."
msgstr ""

#: ../../source/dialogue.rst:56
msgid "Although the precise details of what a say statement does is controlled by the character object used, the usual effect of a say statement is to display dialogue on the screen until the user clicks to dismiss it, then to remove that dialogue on the screen."
msgstr ""

#: ../../source/dialogue.rst:61
msgid "Certain characters have special meaning to Ren'Py, and so can't be used in dialogue strings. The ``{`` character begins a text tag, and the ``[`` character begins a substitution. To use them in dialogue, double them. It may also be necessary to precede a quote with a backslash to prevent it from closing the string. For example::"
msgstr ""

#: ../../source/dialogue.rst:72
msgid "Defining Character Objects"
msgstr ""

#: ../../source/dialogue.rst:74
msgid "By creating a Character object and using it in a say statement, you can customize the look (and to some extent, the behavior) of dialogue. Characters are created by using the define statement to assign a Character to a variable. For example::"
msgstr ""

#: ../../source/dialogue.rst:83
msgid "Once this is done, the character can be used in a say statement::"
msgstr ""

#: ../../source/dialogue.rst:88
msgid "Character is a python function, that takes a large number of keyword arguments. These keyword arguments control the behavior of the character."
msgstr ""

#: ../../source/dialogue.rst:92
msgid "The define statement causes its expression to be evaluated, and assigned to the supplied name. If not inside an init block, the define statement will automatically be run with init priority 0."
msgstr ""

#: ../../source/dialogue.rst:99
msgid "Say with Image Attributes"
msgstr ""

#: ../../source/dialogue.rst:101
msgid "When a character is defined with an associated image tag, say statement involving that character may have image attributes placed between the character name and the second string."
msgstr ""

#: ../../source/dialogue.rst:105
msgid "In this form, if an image with the given tag is showing, Ren'Py will issue a show command involving the character tag and the attributes. If the image is not shown, Ren'Py will store the attributes for use by side images, but will not show an image."
msgstr ""

#: ../../source/dialogue.rst:111
#: ../../source/dialogue.rst:194
#: ../../source/dialogue.rst:250
msgid "For example::"
msgstr ""

#: ../../source/dialogue.rst:122
#: ../../source/dialogue.rst:303
#: ../../source/dialogue.rst:326
msgid "is equivalent to::"
msgstr ""

#: ../../source/dialogue.rst:134
msgid "To cause a transition to occur whenever the images are changed in this way, set :var:`config.say_attribute_transition` to a transition."
msgstr ""

#: ../../source/dialogue.rst:139
msgid "Example Characters"
msgstr ""

#: ../../source/dialogue.rst:141
msgid "Here are a few example characters::"
msgstr ""

#: ../../source/dialogue.rst:150
msgid "Special Characters"
msgstr ""

#: ../../source/dialogue.rst:152
msgid "A few character names are defined by default, and are used automatically in certain situations. Intentionally redefining these characters can change the behavior of Ren'Py, but accidentally using them can be a problem."
msgstr ""

#: ../../source/dialogue.rst:160
msgid "``adv``"
msgstr ""

#: ../../source/dialogue.rst:158
msgid "The default kind of character used by Character. This sets up a character such that one line is displayed on the screen at a time."
msgstr ""

#: ../../source/dialogue.rst:165
msgid "``nvl``"
msgstr ""

#: ../../source/dialogue.rst:163
msgid "A kind of Character that causes dialogue to be displayed in :ref:`NVL-mode`, with multiple lines of text on the screen at once."
msgstr ""

#: ../../source/dialogue.rst:169
msgid "``narrator``"
msgstr ""

#: ../../source/dialogue.rst:168
msgid "The character that's used to display narration, by say statements without a character name."
msgstr ""

#: ../../source/dialogue.rst:175
msgid "``name_only``"
msgstr ""

#: ../../source/dialogue.rst:172
msgid "A character that is used to display dialogue in which the character name is given as a string. This character is copied to a new character with the given name, and then that new character is used to display the dialogue."
msgstr ""

#: ../../source/dialogue.rst:179
msgid "``centered``"
msgstr ""

#: ../../source/dialogue.rst:178
msgid "A character that causes what it says to be displayed centered, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:184
msgid "``vcentered``"
msgstr ""

#: ../../source/dialogue.rst:182
msgid "A character that causes what it says to be displayed centered in vertically oriented text, in the middle of the screen, outside of any window."
msgstr ""

#: ../../source/dialogue.rst:192
msgid "``extend``"
msgstr ""

#: ../../source/dialogue.rst:187
msgid "A character that causes the last character to speak to say a line of dialogue consisting of the last line of dialogue spoken, \"{fast}\", and the dialogue given to extend. This can be used to have the screen change over the course of dialogue."
msgstr ""

#: ../../source/dialogue.rst:192
msgid "Extend is aware of NVL-mode, and treats it correctly."
msgstr ""

#: ../../source/dialogue.rst:216
msgid "Dialogue Window Management"
msgstr ""

#: ../../source/dialogue.rst:218
msgid "Ren'Py includes several statements that allow for management of the dialogue window. As dialogue window is always shown during dialogue, these statements control the presence or absence of the window during non-dialogue interactions."
msgstr ""

#: ../../source/dialogue.rst:223
msgid "``window show``"
msgstr ""

#: ../../source/dialogue.rst:225
msgid "The window show statement causes the window to be shown. It takes as an argument an optional transition, which is used to show the window. If the transition is omitted, :var:`config.window_show_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:230
msgid "``window hide``"
msgstr ""

#: ../../source/dialogue.rst:232
msgid "The window hide statement causes the window to be hidden. It takes as an argument an optional transition, which is used to hide the window. If the transition is omitted,  :var:`config.window_hide_transition` is used."
msgstr ""

#: ../../source/dialogue.rst:237
msgid "``window auto``"
msgstr ""

#: ../../source/dialogue.rst:239
msgid "This enables automatic management of the window. The window is shown before statements listed in :var:`config.window_auto_show` - by default, say statements. The window is hidden before statements listed in :var:`config.window_auto_hide` - by default, ``scene`` and ``call screen`` statements. (Only statements are considered, not statement equivalent functions.)"
msgstr ""

#: ../../source/dialogue.rst:246
msgid "The ``window auto`` statement uses :var:`config.window_show_transition` and :var:`config.window_hide_transition` to show and hide the window, respectively. ``window auto`` is cancelled by ``window show`` or ``window hide``."
msgstr ""

#: ../../source/dialogue.rst:271
msgid "Dialogue window management is subject to the \"show empty window\" :func:`Preference`. If the preference is disabled, the statements above have no effect."
msgstr ""

#: ../../source/dialogue.rst:277
msgid "Say with Arguments"
msgstr ""

#: ../../source/dialogue.rst:279
msgid "Additional arguments can be passed to the say statement by including them in parenthesis after the say statement. For example, one can write::"
msgstr ""

#: ../../source/dialogue.rst:284
msgid "Arguments to the Say statement are first processed by var:`config.say_arguments_callback`, if it is not None. If any remain, they are then passed to the character, which treats them as if they were present when the character was defined. So, the example above displays the dialogue in green."
msgstr ""

#: ../../source/dialogue.rst:291
msgid "Python Equivalents"
msgstr ""

#: ../../source/dialogue.rst:295
msgid "This may only make sense if you've read the :ref:`python` section."
msgstr ""

#: ../../source/dialogue.rst:297
msgid "When the first parameter to a say statement is present and an expression, the say statement is equivalent to calling that expressing with the dialogue and an `interact` argument of True. For example::"
msgstr ""

#: ../../source/dialogue.rst:307
msgid "The say statement will search the ``character`` named store before the default store. If you want to have a character with the same name as a variable in the default store, it can be defined using::"
msgstr ""

#: ../../source/dialogue.rst:313
msgid "This character can then be used alongside a variable in the default store::"
msgstr ""

#: ../../source/dialogue.rst:322
msgid "A say with arguments sees the arguments passed to the function. For example::"
msgstr ""

#: ../../source/dialogue.rst:330
msgid "When e is a Character, this is further equivalent to::"
msgstr ""

#: ../../source/dialogue.rst:334
msgid "But it's possible to use var:`config.say_arguments_callback` or have `e` wrap a character to do things differently."
msgstr ""

#: ../../source/dialogue.rst:341
msgid "Window management is performed by setting the :var:`_window` and :var:`_window_auto` variables, and by using the following two functions:"
msgstr ""

