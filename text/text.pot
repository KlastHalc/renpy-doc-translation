# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2018, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.99.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-12 18:16+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/text.rst:8
msgid "Text"
msgstr ""

#: ../../source/text.rst:10
msgid "Ren'Py contains several ways of displaying text. The :ref:`say <say-statement>` and :ref:`menu <menu-statement>` are primarily concerned with the display of text to the user. The user interface often contains text, displayed using the :ref:`text <sl-text>`, :ref:`textbutton <sl-textbutton>`, and :ref:`label <sl-label>` screen language statements. These functions, along with others, create :func:`Text` displayables, and show them on the screen."
msgstr ""

#: ../../source/text.rst:18
msgid "The Text displayable is responsible for managing the process of showing the text to the user. The text displayable performs actions in the following order:"
msgstr ""

#: ../../source/text.rst:23
msgid "Translating text."
msgstr ""

#: ../../source/text.rst:24
msgid "Interpolating data into the text."
msgstr ""

#: ../../source/text.rst:25
msgid "Styling the text using styles and text tags."
msgstr ""

#: ../../source/text.rst:26
msgid "Laying out the styled text."
msgstr ""

#: ../../source/text.rst:27
msgid "Drawing the text to the screen."
msgstr ""

#: ../../source/text.rst:29
msgid "This chapter discusses the process of text display in Ren'Py."
msgstr ""

#: ../../source/text.rst:33
msgid "Escape Characters"
msgstr ""

#: ../../source/text.rst:35
msgid "There are three special characters that can control the way Ren'Py displays text. A creator needs to be aware of these characters to ensure that their writing is not accidentally misinterpreted by the engine."
msgstr ""

#: ../../source/text.rst:58
msgid "\\ (backslash)"
msgstr ""

#: ../../source/text.rst:40
msgid "The backslash character is used to introduce when writing a Ren'Py or Python string. Some common escape codes are:"
msgstr ""

#: ../../source/text.rst:44
msgid "\\\\\" (backslash-doublequote)"
msgstr ""

#: ../../source/text.rst:44
msgid "Includes a doublequote in a double-quoted string."
msgstr ""

#: ../../source/text.rst:47
msgid "\\\\' (backslash-quote)"
msgstr ""

#: ../../source/text.rst:47
msgid "Includes a single quote in a single-quoted string."
msgstr ""

#: ../../source/text.rst:52
msgid "\\\\\\  (backslash-space)"
msgstr ""

#: ../../source/text.rst:50
msgid "Includes an additional space in a Ren'Py string. By default, Ren'Py script text collapses adjacent whitespace into a single space character."
msgstr ""

#: ../../source/text.rst:55
msgid "\\\\n (backslash-n)"
msgstr ""

#: ../../source/text.rst:55
msgid "Includes a newline character in the text."
msgstr ""

#: ../../source/text.rst:58
msgid "\\\\\\\\ (backslash-backslash)"
msgstr ""

#: ../../source/text.rst:58
msgid "Includes a backslash character in the text."
msgstr ""

#: ../../source/text.rst:63
msgid "[ (left bracket)"
msgstr ""

#: ../../source/text.rst:61
msgid "The left bracket is used to introduce interpolation of a value into the text. To include a single left bracket in your text, double it - write ``[[``."
msgstr ""

#: ../../source/text.rst:68
msgid "{ (left brace)"
msgstr ""

#: ../../source/text.rst:66
msgid "The left brace is used to introduce a text tag. To include a left brace in your text, double it - write ``{{``."
msgstr ""

#: ../../source/text.rst:73
msgid "Interpolating Data"
msgstr ""

#: ../../source/text.rst:75
msgid "Ren'Py supports interpolating data into the text string before it is displayed. For example, if the player's name is stored in the ``playername`` variable, one could write a line of dialogue like::"
msgstr ""

#: ../../source/text.rst:81
msgid "Ren'Py will interpolate variables found in the global store. When using a text widget in a screen, Ren'Py will also interpolate screen local variables. (This can be overridden by supplying an explicit scope argument to the Text displayable.)"
msgstr ""

#: ../../source/text.rst:86
msgid "Ren'Py isn't limited to interpolating simple variables. It can also interpolate fields and components of tuples. So it's possible to have::"
msgstr ""

#: ../../source/text.rst:91
msgid "It's possible to apply formatting when displaying numbers. This will display a floating point number to two decimal places::"
msgstr ""

#: ../../source/text.rst:97
msgid "Ren'Py's string interpolation is taken from the :pep:`3101` string formatting syntax. Ren'Py uses [ to introduce string formatting because { was taken by text tags."
msgstr ""

#: ../../source/text.rst:101
msgid "Along with the !s and !r conversion flags supported by Python, Ren'Py supports !q and !t conversion flag. The !q conversion flag ensures that text tags are properly quoted, so that displaying a string will not introduce unwanted formatting constructs. For example::"
msgstr ""

#: ../../source/text.rst:108
msgid "The !t flag will translate the interpolated string::"
msgstr ""

#: ../../source/text.rst:119
msgid "Styling and Text Tags"
msgstr ""

#: ../../source/text.rst:121
msgid "In Ren'Py, text gains style information in two ways. The first is from the style that is applied to the entire block of text. Please see the section about the :ref:`style system <styles>` for more details, especially the section on :ref:`text style properties <text-style-properties>`."
msgstr ""

#: ../../source/text.rst:126
msgid "The second way is through text tags. Text tags are suitable for styling a portion of text block, or a small fraction of the text blocks in the program. If you find yourself applying the same text tags to every line of text, consider using a style instead."
msgstr ""

#: ../../source/text.rst:131
msgid "There are two text tags. Some text tags are self-closing, while others require a closing tag. When multiple closing tags are used, they should be closed last open, first closed order - Ren'Py will reject incorrect nesting. For example::"
msgstr ""

#: ../../source/text.rst:143
msgid "Some text tags take an argument. In that case, the tag name is followed by an equals sign (=), and the argument. The argument may not contain the right-brace (}) character. The meaning of the argument varies based on the text tag."
msgstr ""

#: ../../source/text.rst:149
msgid "General Text Tags"
msgstr ""

#: ../../source/text.rst:151
msgid "Tags that apply to all text are:"
msgstr ""

#: ../../source/text.rst:156
msgid "The anchor tag creates a hyperlink between itself and its closing tag. While the behavior of the hyperlink is controlled by the :propref:`hyperlink_functions` style property, the default handler has the following behavior."
msgstr ""

#: ../../source/text.rst:161
msgid "When the argument begins with jump:, the rest of the argument is a label to jump to."
msgstr ""

#: ../../source/text.rst:163
msgid "When the argument begins with call:, the rest of the argument is a label to call. As usual, a call ends the current Ren'Py statement."
msgstr ""

#: ../../source/text.rst:166
msgid "When the argument begins with call_in_new_context:, the rest of the argument is a label to call in a new context (using :func:`renpy.call_in_new_context`)."
msgstr ""

#: ../../source/text.rst:169
msgid "Otherwise, the argument is a URL that is opened by the system web browser."
msgstr ""

#: ../../source/text.rst:171
msgid "If there is no protocol section in the argument, :var:`config.hyperlink_protocol` is prepended to it. If config.hyperlink_protocol has been set to \"jump\", {a=label} and {a=jump:label} become equivalent. Creators can define new protocols using :var:`config.hyperlink_handlers`."
msgstr ""

#: ../../source/text.rst:197
msgid "The alpha text tag renders the text between itself and its closing tag in the specified opacity. The opacity should be a value between 0.0 and 1.0, corresponding to fully invisible and fully opaque, respectively. If the value is prefixed by + or -, the opacity will be changed by that amount instead of completely replaced. If the value is prefixed by \\*, the opacity will be multiplied by that amount. ::"
msgstr ""

#: ../../source/text.rst:211
msgid "The bold tag renders the text between itself and its closing tag in a bold font. ::"
msgstr ""

#: ../../source/text.rst:218
msgid "The color text tag renders the text between itself and its closing tag in the specified color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format. ::"
msgstr ""

#: ../../source/text.rst:226
msgid "The characters per second tag sets the speed of text display, for text between the tag and its closing tag. If the argument begins with an asterisk, it's taken as a multiplier to the current text speed. Otherwise, the argument gives the speed to show the text at, in characters per second. ::"
msgstr ""

#: ../../source/text.rst:236
msgid "The font tag renders the text between itself and its closing tag in the specified font. The argument is the filename of the font to use. ::"
msgstr ""

#: ../../source/text.rst:244
msgid "The italics tag renders the text between itself and its closing tag in italics. ::"
msgstr ""

#: ../../source/text.rst:251
msgid "The image tag is a self-closing tag that inserts an image into the text. The image should be the height of a single line of text. The argument should be either the image filename, or the name of an image defined with the image statement. ::"
msgstr ""

#: ../../source/text.rst:260
msgid "The kerning tag is a tag that adjust the kerning of characters between itself and its closing tag. It takes as an argument a floating point number giving the number of pixels of kerning to add to each kerning pair. (The number may be negative to decrease kerning.) ::"
msgstr ""

#: ../../source/text.rst:271
msgid "The outline text tag changes all the outlines (including drop shadows) to the given color. The color should be in #rgb, #rgba, #rrggbb, or #rrggbbaa format. ::"
msgstr ""

#: ../../source/text.rst:279
msgid "The plain tag ensures the text does not have, bold, italics, underline, or strikethrough applied. ::"
msgstr ""

#: ../../source/text.rst:286
msgid "The ruby bottom tag marks text between itself and its closing tag as ruby bottom text. See the section on :ref:`Ruby Text <ruby-text>` for more information."
msgstr ""

#: ../../source/text.rst:292
msgid "The ruby top tag marks text between itself and its closing tag as ruby top text. See the section on :ref:`Ruby Text <ruby-text>` for more information."
msgstr ""

#: ../../source/text.rst:298
msgid "The strikethrough tag draws a line through text between itself and its closing tag. ::"
msgstr ""

#: ../../source/text.rst:305
msgid "The size tag changes the size of text between itself and its closing tag. The argument should be an integer, optionally preceded by + or -. If the argument is just an integer, the size is set to that many pixels high. Otherwise, the size is increased or decreased by that amount. ::"
msgstr ""

#: ../../source/text.rst:315
msgid "The space tag is a self-closing tag that inserts horizontal space into a line of text. As an argument, it takes an integer giving the number of pixels of space to add. ::"
msgstr ""

#: ../../source/text.rst:323
msgid "The underline tag underlines the text between itself and its closing tag. ::"
msgstr ""

#: ../../source/text.rst:330
msgid "The vspace tag is a self-closing tag that inserts vertical space between lines of text. As an argument, it takes an integer giving the number of pixels of space to add. ::"
msgstr ""

#: ../../source/text.rst:338
msgid "Text tags beginning with # are ignored, but can be included to distinguish strings for the purpose of translation. ::"
msgstr ""

#: ../../source/text.rst:344
msgid "Dialogue Text Tags"
msgstr ""

#: ../../source/text.rst:346
msgid "Text tags that only apply to dialogue are:"
msgstr ""

#: ../../source/text.rst:350
msgid "If the fast tag is displayed in a line of text, then all text before it is displayed instantly, even in slow text mode. The fast tag is a self-closing tag. ::"
msgstr ""

#: ../../source/text.rst:360
msgid "The no-wait tag is a self-closing tag that causes the current line of dialogue to automatically dismiss itself once the end of line has been displayed. ::"
msgstr ""

#: ../../source/text.rst:368
msgid "The no-wait tag will wait for voice and self-voicing to complete before advancing."
msgstr ""

#: ../../source/text.rst:373
msgid "The paragraph pause tag is a self-closing tag that terminates the current paragraph, and waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed. ::"
msgstr ""

#: ../../source/text.rst:383
msgid "The wait tag is a self-closing tag that waits for the user to click to continue. If it is given an argument, the argument is interpreted as a number, and the wait automatically ends after that many seconds have passed. ::"
msgstr ""

#: ../../source/text.rst:390
msgid "It's also possible to define :ref:`custom text tags <custom-text-tags>` using Python."
msgstr ""

#: ../../source/text.rst:394
msgid "Style Text Tags"
msgstr ""

#: ../../source/text.rst:396
msgid "Ren'Py supports text tags that access styles. These are text tags where the tag name is empty. In this case, the argument is taken to be the name of a style. For example, the {=mystyle} tag will acces the ``mystyle`` style."
msgstr ""

#: ../../source/text.rst:401
msgid "The text between the tag and the corresponding closing tag has the following properties set to those defined in the style:"
msgstr ""

#: ../../source/text.rst:404
msgid "antialias"
msgstr ""

#: ../../source/text.rst:405
msgid "font"
msgstr ""

#: ../../source/text.rst:406
msgid "size"
msgstr ""

#: ../../source/text.rst:407
msgid "bold"
msgstr ""

#: ../../source/text.rst:408
msgid "italic"
msgstr ""

#: ../../source/text.rst:409
msgid "underline"
msgstr ""

#: ../../source/text.rst:410
msgid "strikethrough"
msgstr ""

#: ../../source/text.rst:411
msgid "color"
msgstr ""

#: ../../source/text.rst:412
msgid "black_color"
msgstr ""

#: ../../source/text.rst:413
msgid "kerning"
msgstr ""

#: ../../source/text.rst:417
msgid "Non-English Languages"
msgstr ""

#: ../../source/text.rst:419
msgid "The default font for Ren'Py contains characters for English and many other languages. For size reasons, it doesn't contain the characters required to render other languages, including Chinese, Japanese, and Korean. In order to support these language, a project must first change the fonts it uses."
msgstr ""

#: ../../source/text.rst:425
msgid "Ren'Py should then support most world languages without further configuration. However, Korean can be written with or without spacing between words. Ren'Py has a special mode to support Korean with spaces, which can be enabled by setting::"
msgstr ""

#: ../../source/text.rst:432
msgid "This can be changed from the default of \"unicode\" in gui.rpy."
msgstr ""

#: ../../source/text.rst:434
msgid "Japanese has multiple rules for line breaking. We recommend starting with \"japanese-normal\", and moving to \"japanese-loose\" or \"japanese-strict\" for more or less break opportunities, respectively.::"
msgstr ""

#: ../../source/text.rst:440
msgid "Ideographic languages provide a large number of opportunities for line breaking. To enable a faster but less-accurate line-breaking algorithm, use::"
msgstr ""

#: ../../source/text.rst:446
msgid "The faster line-breaking algorithm is not be necessary unless the game is displaying huge amounts of text, such as in NVL-mode."
msgstr ""

#: ../../source/text.rst:449
msgid "The line breaking algorithms can be further configured using the :func:`renpy.language_tailor` function."
msgstr ""

#: ../../source/text.rst:454
msgid "Vertical Text"
msgstr ""

#: ../../source/text.rst:456
msgid "When the :propref:`vertical` style property is set, Ren'Py will produce vertically oriented text. The text is written top-to-bottom, right-to-left."
msgstr ""

#: ../../source/text.rst:460
msgid "There are two text tags that interact with vertical text."
msgstr ""

#: ../../source/text.rst:464
msgid "Includes horizontally-oriented text inside vertical text."
msgstr ""

#: ../../source/text.rst:468
msgid "Includes vertically-oriented text inside horizontal text. (This will not rotate the text to the vertical orientation.)"
msgstr ""

#: ../../source/text.rst:473
msgid "If the font does not contain vertical text spacing information, Ren'Py will attempt to synthesize this information from horizontal text information. The spacing may not remain constant between Ren'Py releases."
msgstr ""

#: ../../source/text.rst:482
msgid "Ruby Text"
msgstr ""

#: ../../source/text.rst:484
msgid "Ruby text (also known as furigana or interlinear annotations) is a way of placing small text above a character or word. There are several steps required for your game to support Ruby text."
msgstr ""

#: ../../source/text.rst:488
msgid "First, you must set up styles for the ruby text. The following style changes are required:"
msgstr ""

#: ../../source/text.rst:491
msgid "The :propref:`line_leading` property must be used to leave enough vertical space for the ruby text."
msgstr ""

#: ../../source/text.rst:493
msgid "A new named style must be created. The properties of this style, such as :propref:`size` should be set in a fashion appropriate for ruby text."
msgstr ""

#: ../../source/text.rst:496
msgid "The yoffset of the new style should be set, in order to move the ruby text above the baseline."
msgstr ""

#: ../../source/text.rst:498
msgid "The :propref:`ruby_style` field of the text's style should be set to the newly-created style."
msgstr ""

#: ../../source/text.rst:501
#: ../../source/text.rst:518
#: ../../source/text.rst:601
msgid "For example::"
msgstr ""

#: ../../source/text.rst:512
msgid "Once Ren'Py has been configured, ruby text can be included using the rt and rb text tags. The rt tag is used to mark one or more characters to be displayed as ruby text. If the ruby text is preceded by text enclosed in the rb tag, the ruby text is centered over that text. Otherwise, it is centered over the preceding character."
msgstr ""

#: ../../source/text.rst:524
msgid "It's the creator's responsibility to ensure that ruby text does not leave the boundaries of the text. It may be necessary to add leading or spaces to the left and right of the text to prevent these errors from occurring."
msgstr ""

#: ../../source/text.rst:530
msgid "Fonts"
msgstr ""

#: ../../source/text.rst:532
msgid "Ren'Py supports TrueType/OpenType fonts and collections, and Image-Based fonts."
msgstr ""

#: ../../source/text.rst:535
msgid "A TrueType or OpenType font is specified by giving the name of the font file. The file must be present in the game directory, or one of the archive files."
msgstr ""

#: ../../source/text.rst:539
msgid "Ren'Py also supports TrueType/OpenType collections that define more than one font. When accessing a collection, use the 0-based font index, followed by an at-sign and the file name. For example, \"0@font.ttc\" is the first font in a collection, \"1@font.ttc\" the second, and so on."
msgstr ""

#: ../../source/text.rst:546
msgid "Font Replacement"
msgstr ""

#: ../../source/text.rst:548
msgid "The :var:`config.font_replacement_map` variable is used to map fonts. The combination of font filename, boldness, and italics is mapped to a similar combination. This allows a font with proper italics to be used instead of the automatically-generated italics."
msgstr ""

#: ../../source/text.rst:553
msgid "Once such mapping would be to replace the italic version of the Deja Vu Sans font with the official oblique version. (You'll need to download the oblique font from the web.)::"
msgstr ""

#: ../../source/text.rst:560
msgid "This mapping can improve the look of italic text."
msgstr ""

#: ../../source/text.rst:563
msgid "Image-Based Fonts"
msgstr ""

#: ../../source/text.rst:565
msgid "Image based fonts can be registered by calling one of the following registration functions. Registering an image-based font requires the specification of a name, size, boldness, italicness, and underline. When all of these properties match the registered font, the registered font is used."
msgstr ""

#: ../../source/text.rst:573
msgid "As BMFont is the most complete of the three image font formats Ren'Py supports, it's the one recommended for new projects. An example of BMFont use is::"
msgstr ""

#: ../../source/text.rst:588
msgid "Font Groups"
msgstr ""

#: ../../source/text.rst:590
msgid "When creating a multilingual game, it may not be possible to find a single font that covers every writing system the game use while projecting the the mood the creator intends. To support this, Ren'Py supports font groups that can take characters from two or more fonts and combine them into a single font."
msgstr ""

#: ../../source/text.rst:596
msgid "To create a font group, create a FontGroup object and call the .add method on it once or more. a FontGroup can be used wherever a font name can be used. The add method takes the start and end of a range of unicode character points, and the first range to cover a point is used."
msgstr ""

#: ../../source/text.rst:612
msgid "Text Displayables"
msgstr ""

#: ../../source/text.rst:614
msgid "Text can also be used as a :ref:`displayable <displayables>`, which allows you to apply transforms to text, displaying it as if it was an image and moving it around the screen."
msgstr ""

#: ../../source/text.rst:622
msgid "Text Utility Functions"
msgstr ""

#: ../../source/text.rst:627
msgid "Slow Text Concerns"
msgstr ""

#: ../../source/text.rst:629
msgid "Ren'Py allows the creator or user to indicate that text should be displayed slowly. In this case, Ren'Py will render the text to a texture, and then draw rectangles from the texture to the screen."
msgstr ""

#: ../../source/text.rst:633
msgid "Unfortunately, this means that it's possible to get rendering artifacts when characters overlap. To minimize these rendering artifacts, ensure that the :propref:`line_leading` and :propref:`line_spacing` properties are large enough that lines do not overlap. If the bottoms of characters on the first line are clipped, especially if line_spacing is negative, consider increasing :propref:`line_overlap_split`."
msgstr ""

#: ../../source/text.rst:641
msgid "Horizontal artifacts are also possible when characters are kerned together, but these artifacts are less severe, as they exist for only a single frame."
msgstr ""

#: ../../source/text.rst:645
msgid "Artifacts aren't a problem for static text, like the text in menus and other parts of the user interface."
msgstr ""

#: ../../source/text.rst:649
msgid "Text Overflow Logging"
msgstr ""

#: ../../source/text.rst:651
msgid "Ren'Py can log cases where text expands outside of the area allocated for it. To enable text overflow logging, the following steps are necessary."
msgstr ""

#: ../../source/text.rst:655
msgid "Set the :var:`config.debug_text_overflow` variable to true."
msgstr ""

#: ../../source/text.rst:656
msgid "Set the :propref:`xmaximum` and :propref:`ymaximum` style properties on either the Text displayable, or a container enclosing it."
msgstr ""

#: ../../source/text.rst:658
msgid "Run the game."
msgstr ""

#: ../../source/text.rst:660
msgid "Whenever text is displayed that overflows the available area, Ren'Py will log an error to the ``text_overflow.txt`` file."
msgstr ""

